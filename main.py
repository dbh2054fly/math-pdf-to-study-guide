import os
import subprocess
import pytesseract
import requests
import json
from pdf2image import convert_from_path
from transformers import pipeline
from pdfminer.high_level import extract_text as pdfminer_extract_text

# --- Step 1: File Discovery ---

def find_course_materials(directory):
    """
    Recursively search the given directory for PDF and TXT files.
    Returns a list of file paths.
    """
    materials = []
    for root, _, files in os.walk(directory):
        for file in files:
            if file.lower().endswith(('.pdf', '.txt')):
                materials.append(os.path.join(root, file))
    return materials

# --- Step 2: Extraction of text and math from lecture slides ---

def extract_text(file_path):
    """
    Uses pdfminer to extract text from slides
    """
    return pdfminer_extract_text(file_path)

def extract_math(file_path):
    """
    Extract math from slides
    """
    # TODO: Implement math extraction
    return ""

# --- Step 3: Summarization ---

def chunk_text(text, chunk_size=1000):
    """
    Splits text into smaller chrrrunks to work within model token limits.
    """
    return [text[i:i+chunk_size] for i in range(0, len(text), chunk_size)]

def summarize_text(text, summarizer, max_length=130, min_length=30):
    """
    Summarize long text by splitting it into chunks and summarizing each chunk.
    Returns the combined summary.
    """
    text = text.strip()
    if not text:
        return ""
    
    chunks = chunk_text(text)
    summaries = []
    for chunk in chunks:
        if len(chunk.split()) > 20:  # Only summarize if the chunk is long enough
            summary = summarizer(chunk, max_length=max_length, min_length=min_length, do_sample=False)[0]['summary_text']
            summaries.append(summary)
    return "\n\n".join(summaries)

# --- Step 4: Generate LaTeX Study Guide ---

def generate_latex(study_guide_content, output_file="study_guide.tex"):
    """
    Generate a LaTeX file using a basic template.
    """
    latex_template = r"""
\documentclass[12pt]{article}
\usepackage{amsmath, amsthm, amssymb}
\usepackage{geometry}
\usepackage{hyperref}
\geometry{letterpaper, margin=1in}
\title{Study Guide}
\author{Generated by the OCR Pipeline}
\date{\today}
\begin{document}
\maketitle
\tableofcontents
\newpage

%s

\end{document}
"""
    full_latex = latex_template % study_guide_content
    with open(output_file, 'w', encoding='utf-8') as f:
        f.write(full_latex)
    print(f"LaTeX file generated: {output_file}")

def compile_latex(tex_file):
    """
    Compile the LaTeX file into a PDF using pdflatex.
    """
    try:
        subprocess.run(['pdflatex', tex_file], check=True)
        subprocess.run(['pdflatex', tex_file], check=True)
        print("Compilation successful! PDF generated.")
    except subprocess.CalledProcessError as e:
        print("Error during compilation:", e)

# --- Main Pipeline ---

'''def main():
    # 1. Ask user for the directory containing course materials (e.g., lecture slides).
    directory = input("Enter the directory containing course materials: ").strip()
    if not os.path.isdir(directory):
        print("Invalid directory. Exiting.")
        return

    # 2. Find all course material files.
    materials = find_course_materials(directory)
    if not materials:
        print("No course material files found in the directory.")
        return

    print(f"Found {len(materials)} material file(s). Extracting text via OCR...")
    combined_text = ""
    for file in materials:
        print(f"Processing: {file}")
        text = extract_material_text(file)
        combined_text += "\n" + text

    if not combined_text.strip():
        print("No text could be extracted from the materials. Exiting.")
        return

    # 3. Summarize the extracted text.
    print("Initializing summarization pipeline (this may take a moment)...")
    # For math/technical text (e.g., lecture slides)
    summarizer = pipeline("summarization", model="allenai/led-large-16384-arxiv")
    print("Summarizing the course material...")
    study_guide_summary = summarize_text(combined_text, summarizer)

    # Wrap the summary in a LaTeX section.
    study_guide_content = r"\section{Course Material Summary}" + "\n" + study_guide_summary

    # 4. Generate the LaTeX study guide.
    tex_file = "study_guide.tex"
    generate_latex(study_guide_content, output_file=tex_file)

    # 5. Optionally compile the LaTeX file into a PDF.
    compile_choice = input("Would you like to compile the LaTeX file to PDF? (y/n): ").strip().lower()
    if compile_choice == "y":
        compile_latex(tex_file)
    else:
        print("LaTeX file generated. You can compile it manually if needed.")'''

def main():
    file_path = "/Users/dbhfly/Projects/study-guide-generator/test_files/1_1-full.pdf"
    text = extract_text(file_path)
    print(text)

if __name__ == "__main__":
    main()